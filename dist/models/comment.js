// Generated by CoffeeScript 1.7.1
var commentFields, comments, idsCheck, postComments, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore')._;

comments = require(__dirname + '/../dao/comment').comments;

postComments = require(__dirname + '/../dao/comment').postComments;

commentFields = require(__dirname + '/../data/config/config').commentFields;

idsCheck = require(__dirname + '/../utility/misc').idsCheck;

module.exports = {

  /**
  		* 通过评论id获取一条评论的所有信息
  		* @param number id 要获取的评论id
  		* @return object|boolean 如果成功，就返回包括评论所有信息的对象，否则返回false
   */
  getCommentById: function(id) {
    if (comments[parseInt(id, 10)] != null) {
      return comments[parseInt(id, 10)];
    } else {
      return false;
    }
  },

  /**
  		* 按照文章id获取文章评论
  		* @param {number[]|number} ids 要获取的评论的文章id
  		* @param {string[]|string} properties 要获取的评论的属性
  		* @param {number} offset 从第几篇评论开始
  		* @param {number} limit 取多少篇评论
  		* @return {object|array|boolean} 如果成功，就返回评论内容。
   																 如果只提供了一个文章id，那么就只返回这篇文章的评论的数组，否则返回一个以文章id为索引的对象
   */
  getCommentsByPostId: function(ids, properties, offset, limit) {
    var comment, id, key, property, ret, _i, _j, _len, _len1, _ref;
    if ((ids = idsCheck(ids)) === false) {
      return false;
    }
    if (_.isArray(properties) !== true) {
      properties = [properties];
    }
    properties = _.intersection(commentFields, properties);
    if (properties.length < 1) {
      return false;
    }
    ret = {};
    for (_i = 0, _len = ids.length; _i < _len; _i++) {
      id = ids[_i];
      if (_.isUndefined(postComments[id]) !== true) {
        ret[id] = [];
        _ref = postComments[id];
        for (key = _j = 0, _len1 = _ref.length; _j < _len1; key = ++_j) {
          comment = _ref[key];
          if (ids.length !== 1 || !(offset != null) || !(limit != null) || offset >= key && (_.isUndefined(ret[id]) || ret[id].length < limit)) {
            ret[id].push({});
            for (property in comment) {
              if (__indexOf.call(properties, property) >= 0) {
                _.last(ret[id])[property] = postComments[id][key][property];
              }
            }
          }
        }
      }
    }
    if (ids.length === 1) {
      ret = ret[ids[0]];
    }
    return ret;
  }
};
